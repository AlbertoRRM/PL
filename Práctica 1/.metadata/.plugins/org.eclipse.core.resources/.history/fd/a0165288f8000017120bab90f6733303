package procesamientos.generacionCodigo;

import maquinaP.MaquinaP;
import procesamientos.Procesamiento;
import programa.Programa;
import programa.Programa.*;

public class GeneracionDeCodigo extends Procesamiento {
	private MaquinaP maquina;
	private Programa programa;

	public GeneracionDeCodigo(MaquinaP maquina, Programa programa) {
		this.maquina = maquina;
		this.programa = programa;
	}

	public void procesa(Var exp) {
		maquina.addInstruccion(maquina.apilaDir(exp.declaracion().dir(), exp.enlaceFuente()));
	}

	public void procesa(CteInt exp) {
		maquina.addInstruccion(maquina.apilaInt(exp.valEntero()));
	}

	public void procesa(CteBool exp) {
		maquina.addInstruccion(maquina.apilaBool(exp.valBool()));
	}
	
	public void procesa(CteChar exp) {
		maquina.addInstruccion(maquina.apilaChar(exp.valChar()));
	}
	
	public void procesa(CteReal exp) {
		maquina.addInstruccion(maquina.apilaReal(exp.valReal()));
	}
	
	public void procesa(CteString exp) {
		maquina.addInstruccion(maquina.apilaString(exp.valString()));
	}

	public void procesa(Suma exp) {
		exp.opnd1().procesaCon(this);
		exp.opnd2().procesaCon(this);
		
		if(exp.opnd1().tipo().equals(programa.tipoInt()) && exp.opnd2().tipo().equals(programa.tipoInt()))
			maquina.addInstruccion(maquina.sumaInt());
		else if (exp.opnd1().tipo().equals(programa.tipoReal()) || exp.opnd2().tipo().equals(programa.tipoReal()))
			maquina.addInstruccion(maquina.sumaReal());
		else
			maquina.addInstruccion(maquina.concatena());
	}
	
	public void procesa(Resta exp) {
		exp.opnd1().procesaCon(this);
		exp.opnd2().procesaCon(this);
		
		if(exp.opnd1().tipo().equals(programa.tipoInt()) && exp.opnd2().tipo().equals(programa.tipoInt()))
			maquina.addInstruccion(maquina.restaInt());
		else if (exp.opnd1().tipo().equals(programa.tipoReal()) || exp.opnd2().tipo().equals(programa.tipoReal()))
			maquina.addInstruccion(maquina.restaReal());
	}
	
	public void procesa(Multiplicacion exp) {
		exp.opnd1().procesaCon(this);
		exp.opnd2().procesaCon(this);
		
		if(exp.opnd1().tipo().equals(programa.tipoInt()) && exp.opnd2().tipo().equals(programa.tipoInt()))
			maquina.addInstruccion(maquina.multiplicacionInt());
		else if (exp.opnd1().tipo().equals(programa.tipoReal()) || exp.opnd2().tipo().equals(programa.tipoReal()))
			maquina.addInstruccion(maquina.multiplicacionReal());
	}

	public void procesa(Division exp) {
		exp.opnd1().procesaCon(this);
		exp.opnd2().procesaCon(this);
		
		if(exp.opnd1().tipo().equals(programa.tipoInt()) && exp.opnd2().tipo().equals(programa.tipoInt()))
			maquina.addInstruccion(maquina.divisionInt());
		else if (exp.opnd1().tipo().equals(programa.tipoReal()) || exp.opnd2().tipo().equals(programa.tipoReal()))
			maquina.addInstruccion(maquina.divisionReal());
	}
	
	public void procesa(RestoEntero exp) {
		exp.opnd1().procesaCon(this);
		exp.opnd2().procesaCon(this);
		
		maquina.addInstruccion(maquina.restoEntero());
	}
	
	public void procesa(And exp) {
		exp.opnd1().procesaCon(this);
		exp.opnd2().procesaCon(this);
		
		maquina.addInstruccion(maquina.and());
	}

	public void procesa(Prog p) {
		p.inst().procesaCon(this);
	}

	public void procesa(IAsig i) {
		i.exp().procesaCon(this);
		
		maquina.addInstruccion(maquina.desapilaDir(i.declaracion().dir()));
	}

	public void procesa(IBloque b) {
		for (Programa.Inst i : b.is())
			i.procesaCon(this);
	}
}
