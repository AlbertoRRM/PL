package maquinaP;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

public class MaquinaP {
	private final static String W_ACCESO = "**** WARNING: Acceso a memoria sin inicializar";
	private final Valor UNKNOWN;

	private class Valor {
		public int valorInt() {
			throw new UnsupportedOperationException();
		}

		public boolean valorBool() {
			throw new UnsupportedOperationException();
		}
		
		public char valorChar() {
			throw new UnsupportedOperationException();
		}
		
		public double valorReal() {
			throw new UnsupportedOperationException();
		}
		
		public String valorString() {
			throw new UnsupportedOperationException();
		}
	}

	private class ValorInt extends Valor {
		private int valor;

		public ValorInt(int valor) {
			this.valor = valor;
		}

		public int valorInt() {
			return valor;
		}
		
		public double valorReal() {
			return valor;
		}

		public String toString() {
			return String.valueOf(valor);
		}
	}

	private class ValorBool extends Valor {
		private boolean valor;

		public ValorBool(boolean valor) {
			this.valor = valor;
		}

		public boolean valorBool() {
			return valor;
		}

		public String toString() {
			return String.valueOf(valor);
		}
	}
	
	private class ValorChar extends Valor {
		private char valor;
		
		public ValorChar(char valor) {
			this.valor = valor;
		}
		
		public char valorChar() {
			return valor;
		}
		
		public String toString() {
			return String.valueOf(valor);
		}
	}
	
	private class ValorReal extends Valor {
		private double valor;
		
		public ValorReal(double valor) {
			this.valor = valor;
		}
		
		public double valorReal() {
			return valor;
		}
		
		public String toString() {
			return String.valueOf(valor);
		}
	}
	
	private class ValorString extends Valor {
		private String valor;
		
		public ValorString(String valor) {
			this.valor = valor;
		}
		
		public String valorString() {
			return valor;
		}
	}

	private class ValorUnknown extends Valor {
		public String toString() {
			return "?";
		}
	}

	private List<Instruccion> codigoP;
	private Stack<Valor> pilaEvaluacion;
	private Valor[] datos;
	private int pc;

	public interface Instruccion {
		void ejecuta();
	}

	private ISumaInt ISUMAINT;
	private ISumaReal ISUMAREAL;
	private IConcatena ICONCATENA;
	private IRestaInt IRESTAINT;
	private IRestaReal IRESTAREAL;
	private IMultInt IMULTINT;
	private IMultReal IMULTREAL;
	private IDivInt IDIVINT;
	private IDivReal IDIVREAL;
	private IRestoEntero IRESTOENTERO;
	private ICambioSignoInt ICAMBIOSIGNOINT;
	private ICambioSignoReal ICAMBIOSIGNOREAL;
	private IAnd IAND;

	private class ISumaInt implements Instruccion {
		public void ejecuta() {
			Valor opnd2 = pilaEvaluacion.pop();
			Valor opnd1 = pilaEvaluacion.pop();
			Valor resul;
			
			if (opnd1 == UNKNOWN || opnd2 == UNKNOWN)
				resul = UNKNOWN;
			else
				resul = new ValorInt(opnd1.valorInt() + opnd2.valorInt());
			pilaEvaluacion.push(resul);
			pc++;
		}

		public String toString() {
			return "suma entera";
		};
	}
	
	private class ISumaReal implements Instruccion {
		public void ejecuta() {
			Valor opnd2 = pilaEvaluacion.pop();
			Valor opnd1 = pilaEvaluacion.pop();
			Valor resul;
			
			if(opnd1 == UNKNOWN || opnd2 == UNKNOWN)
				resul = UNKNOWN;
			else
				resul = new ValorReal(opnd1.valorReal() + opnd2.valorReal());
			pilaEvaluacion.push(resul);
			pc++;
		}
		
		public String toString() {
			return "suma real";
		};
	}
	
	private class IRestaInt implements Instruccion {
		public void ejecuta() {
			Valor opnd2 = pilaEvaluacion.pop();
			Valor opnd1 = pilaEvaluacion.pop();
			Valor resul;
			
			if(opnd1 == UNKNOWN || opnd2 == UNKNOWN)
				resul = UNKNOWN;
			else
				resul = new ValorInt(opnd1.valorInt() - opnd2.valorInt());
			pilaEvaluacion.push(resul);
			pc++;
		}
		
		public String toString() {
			return "resta entera";
		};
	}

	private class IRestaReal implements Instruccion {
		public void ejecuta() {
			Valor opnd2 = pilaEvaluacion.pop();
			Valor opnd1 = pilaEvaluacion.pop();
			Valor resul;
			
			if(opnd1 == UNKNOWN || opnd2 == UNKNOWN)
				resul = UNKNOWN;
			else
				resul = new ValorReal(opnd1.valorReal() - opnd2.valorReal());
			pilaEvaluacion.push(resul);
			pc++;
		}
		
		public String toString() {
			return "resta real";
		};
	}

	private class IMultInt implements Instruccion {
		public void ejecuta() {
			Valor opnd2 = pilaEvaluacion.pop();
			Valor opnd1 = pilaEvaluacion.pop();
			Valor resul;
			
			if(opnd1 == UNKNOWN || opnd2 == UNKNOWN)
				resul = UNKNOWN;
			else
				resul = new ValorInt(opnd1.valorInt() * opnd2.valorInt());
			pilaEvaluacion.push(resul);
			pc++;
		}
		
		public String toString() {
			return "multiplicacion entera";
		};
	}
	
	private class IMultReal implements Instruccion {
		public void ejecuta() {
			Valor opnd2 = pilaEvaluacion.pop();
			Valor opnd1 = pilaEvaluacion.pop();
			Valor resul;
			
			if(opnd1 == UNKNOWN || opnd2 == UNKNOWN)
				resul = UNKNOWN;
			else
				resul = new ValorReal(opnd1.valorReal() * opnd2.valorReal());
			pilaEvaluacion.push(resul);
			pc++;
		}
		
		public String toString() {
			return "multiplicacion real";
		};
	}
	
	private class IDivInt implements Instruccion {
		public void ejecuta() {
			Valor opnd2 = pilaEvaluacion.pop();
			Valor opnd1 = pilaEvaluacion.pop();
			Valor resul;
			
			if(opnd1 == UNKNOWN || opnd2 == UNKNOWN)
				resul = UNKNOWN;
			else
				resul = new ValorInt(opnd1.valorInt() / opnd2.valorInt());
			pilaEvaluacion.push(resul);
			pc++;
		}
		
		public String toString() {
			return "division entera";
		};
	}
	
	private class IDivReal implements Instruccion {
		public void ejecuta() {
			Valor opnd2 = pilaEvaluacion.pop();
			Valor opnd1 = pilaEvaluacion.pop();
			Valor resul;
			
			if(opnd1 == UNKNOWN || opnd2 == UNKNOWN)
				resul = UNKNOWN;
			else
				resul = new ValorReal(opnd1.valorReal() / opnd2.valorReal());
			pilaEvaluacion.push(resul);
			pc++;
		}
		
		public String toString() {
			return "division real";
		};
	}
	
	private class IConcatena implements Instruccion {
		public void ejecuta() {
			Valor opnd2 = pilaEvaluacion.pop();
			Valor opnd1 = pilaEvaluacion.pop();
			Valor resul;
			
			if(opnd1 == UNKNOWN || opnd2 == UNKNOWN)
				resul = UNKNOWN;
			else
				resul = new ValorString(opnd1.valorString() + opnd2.valorString());
			pilaEvaluacion.push(resul);
			pc++;
		}
		
		public String toString() {
			return "concatenacion";
		};
	}
	
	private class IRestoEntero implements Instruccion {
		public void ejecuta() {
			Valor opnd2 = pilaEvaluacion.pop();
			Valor opnd1 = pilaEvaluacion.pop();
			Valor resul;
			
			if(opnd1 == UNKNOWN || opnd2 == UNKNOWN)
				resul = UNKNOWN;
			else
				resul = new ValorInt(opnd1.valorInt() % opnd2.valorInt());
			pilaEvaluacion.push(resul);
			pc++;
		}
		
		public String toString() {
			return "concatenacion";
		};
	}
	
	private class ICambioSignoInt implements Instruccion {
		public void ejecuta() {
			Valor opnd1 = pilaEvaluacion.pop();
			Valor resul;
			
			if(opnd1 == UNKNOWN)
				resul = UNKNOWN;
			else
				resul = new ValorInt(-opnd1.valorInt());
			pilaEvaluacion.push(resul);
			pc++;
		}
	}
	
	private class ICambioSignoReal implements Instruccion {
		public void ejecuta() {
			Valor opnd1 = pilaEvaluacion.pop();
			Valor resul;
			
			if(opnd1 == UNKNOWN)
				resul = UNKNOWN;
			else
				resul = new ValorReal(-opnd1.valorReal());
			pilaEvaluacion.push(resul);
			pc++;
		}
	}
	
	private class IAnd implements Instruccion {
		public void ejecuta() {
			Valor opnd2 = pilaEvaluacion.pop();
			Valor opnd1 = pilaEvaluacion.pop();
			Valor resul;
			
			if (opnd1 == UNKNOWN || opnd2 == UNKNOWN)
				resul = UNKNOWN;
			else
				resul = new ValorBool(opnd1.valorBool() && opnd2.valorBool());
			pilaEvaluacion.push(resul);
			pc++;
		}

		public String toString() {
			return "and";
		};
	}

	private class IApilaInt implements Instruccion {
		private int valor;

		public IApilaInt(int valor) {
			this.valor = valor;
		}

		public void ejecuta() {
			pilaEvaluacion.push(new ValorInt(valor));
			pc++;
		}

		public String toString() {
			return "apilaInt(" + valor + ")";
		};
	}

	private class IDesapilaDir implements Instruccion {
		private int dir;

		public IDesapilaDir(int dir) {
			this.dir = dir;
		}

		public void ejecuta() {
			datos[dir] = pilaEvaluacion.pop();
			pc++;
		}

		public String toString() {
			return "desapilaDir(" + dir + ")";
		};
	}

	private class IApilaDir implements Instruccion {
		private int dir;
		private String enlaceFuente;

		public IApilaDir(int dir) {
			this(dir, null);
		}

		public IApilaDir(int dir, String enlaceFuente) {
			this.enlaceFuente = enlaceFuente;
			this.dir = dir;
		}

		public void ejecuta() {
			if (datos[dir] == null) {
				System.err.println(enlaceFuente + ":" + W_ACCESO);
				pilaEvaluacion.push(UNKNOWN);
			} else
				pilaEvaluacion.push(datos[dir]);
			pc++;
		}

		public String toString() {
			return "apilaDir(" + dir + "," + enlaceFuente + ")";
		};
	}

	private class IApilaBool implements Instruccion {
		private boolean valor;

		public IApilaBool(boolean valor) {
			this.valor = valor;
		}

		public void ejecuta() {
			pilaEvaluacion.push(new ValorBool(valor));
			pc++;
		}

		public String toString() {
			return "apilaBool(" + valor + ")";
		};
	}
	
	private class IApilaChar implements Instruccion {
		private char valor;
		
		public IApilaChar(char valor) {
			this.valor = valor;
		}
		
		public void ejecuta() {
			pilaEvaluacion.push(new ValorChar(valor));
		}
		
		public String toString() {
			return "apilaChar(" + valor + ")";
		};
	}
	
	private class IApilaReal implements Instruccion {
		private double valor;
		
		public IApilaReal(double valor) {
			this.valor = valor;
		}
		
		public void ejecuta() {
			pilaEvaluacion.push(new ValorReal(valor));
		}
		
		public String toString() {
			return "apilaReal(" + valor + ")";
		};
	}
	
	private class IApilaString implements Instruccion {
		private String valor;
		
		public IApilaString(String valor) {
			this.valor = valor;
		}
		
		public void ejecuta() {
			pilaEvaluacion.push(new ValorString(valor));
		}
		
		public String toString() {
			return "apilaString (" + valor + ")";
		};
	}

	public Instruccion sumaInt() {
		return ISUMAINT;
	}
	
	public Instruccion sumaReal() {
		return ISUMAREAL;
	}

	public Instruccion restaInt() {
		return IRESTAINT;
	}
	
	public Instruccion restaReal() {
		return IRESTAREAL;
	}
	
	public Instruccion multiplicacionInt() {
		return IMULTINT;
	}
	
	public Instruccion multiplicacionReal() {
		return IMULTREAL;
	}
	
	public Instruccion divisionInt() {
		return IDIVINT;
	}
	
	public Instruccion divisionReal() {
		return IDIVREAL;
	}
	
	public Instruccion concatena() {
		return ICONCATENA;
	}
	
	public Instruccion restoEntero() {
		return IRESTOENTERO;
	}
	
	public Instruccion cambioSignoInt() {
		return ICAMBIOSIGNOINT;
	}
	
	public Instruccion cambioSignoReal() {
		return ICAMBIOSIGNOREAL;
	}
	
	public Instruccion and() {
		return IAND;
	}

	public Instruccion apilaInt(int val) {
		return new IApilaInt(val);
	}

	public Instruccion apilaBool(boolean val) {
		return new IApilaBool(val);
	}

	public Instruccion apilaChar(char val) {
		return new IApilaChar(val);
	}
	
	public Instruccion apilaReal(double val) {
		return new IApilaReal(val);
	}
	
	public Instruccion apilaString(String val) {
		return new IApilaString(val);
	}
	
	public Instruccion desapilaDir(int dir) {
		return new IDesapilaDir(dir);
	}

	public Instruccion apilaDir(int dir) {
		return new IApilaDir(dir);
	}

	public Instruccion apilaDir(int dir, String dinfo) {
		return new IApilaDir(dir, dinfo);
	}

	public void addInstruccion(Instruccion i) {
		codigoP.add(i);
	}

	public MaquinaP(int tamdatos) {
		this.codigoP = new ArrayList<>();
		pilaEvaluacion = new Stack<>();
		datos = new Valor[tamdatos];
		this.pc = 0;
		ISUMAINT = new ISumaInt();
		ISUMAREAL = new ISumaReal();
		IRESTAINT = new IRestaInt();
		IRESTAREAL = new IRestaReal();
		IMULTINT = new IMultInt();
		IMULTREAL = new IMultReal();
		IDIVINT = new IDivInt();
		IDIVREAL = new IDivReal();
		ICONCATENA = new IConcatena();
		IRESTOENTERO = new IRestoEntero();
		ICAMBIOSIGNOINT = new ICambioSignoInt();
		ICAMBIOSIGNOREAL = new ICambioSignoReal();
		IAND = new IAnd();
		UNKNOWN = new ValorUnknown();
	}

	public void ejecuta() {
		while (pc != codigoP.size()) {
			codigoP.get(pc).ejecuta();
		}
	}

	public void muestraCodigo() {
		System.out.println("CodigoP");
		for (int i = 0; i < codigoP.size(); i++) {
			System.out.println(" " + i + ":" + codigoP.get(i));
		}
	}

	public void muestraEstado() {
		System.out.println("Pila de evaluacion");
		for (int i = 0; i < pilaEvaluacion.size(); i++) {
			System.out.println(" " + i + ":" + pilaEvaluacion.get(i));
		}
		System.out.println("Datos");
		for (int i = 0; i < datos.length; i++) {
			System.out.println(" " + i + ":" + datos[i]);
		}
		System.out.println("PC:" + pc);
	}
}
